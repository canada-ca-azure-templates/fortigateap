{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "fwObject": {
            "value": {
                "vmKeyVault": {
                    "keyVaultResourceGroupName": "PwS2-validate-fortigateAP-RG",
                    "keyVaultName": "PwS2-validate-[unique]"
                },
                "adminUsername": "fwadmin",
                "adminSecret": "fwpassword",
                "FortiGateNamePrefix": "validate",
                "FortiGateImageSKU": "fortinet_fg-vm",
                "FortiGateVersion": "latest",
                "instanceType": "Standard_F4",
                "publicIPNewOrExisting": "new",
                "publicIP2NewOrExisting": "new",
                "publicIP3NewOrExisting": "new",
                "publicIP4NewOrExisting": "new",
                "publicIP5NewOrExisting": "new",
                "publicIPAddressResourceGroup": "PwS2-validate-fortigateAP-RG",
                "publicIP2AddressResourceGroup": "PwS2-validate-fortigateAP-RG",
                "publicIP3AddressResourceGroup": "PwS2-validate-fortigateAP-RG",
                "publicIP4AddressResourceGroup": "PwS2-validate-fortigateAP-RG",
                "publicIP5AddressResourceGroup": "PwS2-validate-fortigateAP-RG",
                "publicIPAddressType": "Static",
                "vnetName": "PwS2-validate-fortigateAP-VNET",
                "vnetResourceGroup": "PwS2-validate-fortigateAP-RG",
                "Subnet1Name": "outside",
                "Subnet2Name": "inside",
                "Subnet3Name": "HASync",
                "Subnet4Name": "management",
                "firewall1Config": "Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSI9PT09PT09PT09PT09PT0wNzQwOTQ3OTk0MDQ4OTE5Njg5PT0iDQpNSU1FLVZlcnNpb246IDEuMA0KDQotLT09PT09PT09PT09PT09PTA3NDA5NDc5OTQwNDg5MTk2ODk9PQ0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PSJ1cy1hc2NpaSINCk1JTUUtVmVyc2lvbjogMS4wDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0DQpDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0iY29uZmlnIg0KDQpjb25maWcgc3lzdGVtIGdsb2JhbA0KICAgIHNldCBhZG1pbi1zcG9ydCA4NDQzDQogICAgc2V0IGFsaWFzICJQd1AwRldDb3JlQSINCiAgICBzZXQgaG9zdG5hbWUgIlB3UDBGV0NvcmVBIg0KICAgIHNldCB0aW1lem9uZSAwNA0KZW5kDQpjb25maWcgc3lzdGVtIGludGVyZmFjZQ0KICAgIGVkaXQgInBvcnQxIg0KICAgICAgICBzZXQgdmRvbSAicm9vdCINCiAgICAgICAgc2V0IG1vZGUgc3RhdGljDQogICAgICAgIHNldCBpcCAxMC4xLjExMi40LzIzDQogICAgICAgIHNldCBhbGxvd2FjY2VzcyBwaW5nIHByb2JlLXJlc3BvbnNlDQogICAgICAgIHNldCB0eXBlIHBoeXNpY2FsDQogICAgICAgIHNldCBkZXNjcmlwdGlvbiAiUHdQMC1PdXRzaWRlIg0KICAgICAgICBzZXQgYWxpYXMgIlB3UDAtT3V0c2lkZSINCiAgICBuZXh0DQogICAgZWRpdCAicG9ydDIiDQogICAgICAgIHNldCB2ZG9tICJyb290Ig0KICAgICAgICBzZXQgbW9kZSBzdGF0aWMNCiAgICAgICAgc2V0IGlwIDEwLjEuMTE2LjUvMjcNCiAgICAgICAgc2V0IGFsbG93YWNjZXNzIHBpbmcgcHJvYmUtcmVzcG9uc2UNCiAgICAgICAgc2V0IHR5cGUgcGh5c2ljYWwNCiAgICAgICAgc2V0IGRlc2NyaXB0aW9uICJQd1AwLUNvcmVUb1Nwb2tlcyINCiAgICAgICAgc2V0IGFsaWFzICJQd1AwLUNvcmVUb1Nwb2tlcyINCiAgICBuZXh0DQogICAgZWRpdCAicG9ydDMiDQogICAgICAgIHNldCB2ZG9tICJyb290Ig0KICAgICAgICBzZXQgbW9kZSBzdGF0aWMNCiAgICAgICAgc2V0IGlwIDEwLjEuMTE2LjM2LzI3DQogICAgICAgIHNldCB0eXBlIHBoeXNpY2FsDQogICAgICAgIHNldCBkZXNjcmlwdGlvbiAiUHdQMC1IQVN5bmMiDQogICAgICAgIHNldCBhbGlhcyAiUHdQMC1IQVN5bmMiDQogICAgbmV4dA0KICAgIGVkaXQgInBvcnQ0Ig0KICAgICAgICBzZXQgdmRvbSAicm9vdCINCiAgICAgICAgc2V0IG1vZGUgc3RhdGljDQogICAgICAgIHNldCBpcCAxMC4xLjExNi42OC8yNw0KICAgICAgICBzZXQgYWxsb3dhY2Nlc3MgcGluZyBodHRwcyBzc2ggaHR0cCBmZ2ZtDQogICAgICAgIHNldCB0eXBlIHBoeXNpY2FsDQogICAgICAgIHNldCBkZXNjcmlwdGlvbiAiUHdQMC1NYW5hZ2VtZW50Ig0KICAgICAgICBzZXQgYWxpYXMgIlB3UDAtTWFuYWdlbWVudCINCiAgICBuZXh0DQplbmQNCmNvbmZpZyBzeXN0ZW0gcHJvYmUtcmVzcG9uc2UNCiAgICBzZXQgbW9kZSBodHRwLXByb2JlDQplbmQNCmNvbmZpZyByb3V0ZXIgc3RhdGljDQogICAgZWRpdCAxDQogICAgICAgIHNldCBkc3QgMTAuMjUuMC4wIDI1NS4yNTUuMTkyLjANCiAgICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTYuMQ0KICAgICAgICBzZXQgZGV2aWNlICJwb3J0MiINCiAgICBuZXh0DQogICAgZWRpdCAyDQogICAgICAgIHNldCBkc3QgMTAuMjUuMTI4LjAgMjU1LjI1NS4xMjguMA0KICAgICAgICBzZXQgZ2F0ZXdheSAxMC4xLjExNi4xDQogICAgICAgIHNldCBkZXZpY2UgInBvcnQyIg0KICAgIG5leHQNCiAgICBlZGl0IDMNCiAgICAgICAgc2V0IGRzdCAxMC4xLjEyMC4wIDI1NS4yNTUuMjQ4LjANCiAgICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTYuMQ0KICAgICAgICBzZXQgZGV2aWNlICJwb3J0MiINCiAgICBuZXh0DQogICAgZWRpdCA0DQogICAgICAgIHNldCBnYXRld2F5IDEwLjEuMTEyLjENCiAgICAgICAgc2V0IGRldmljZSAicG9ydDEiDQogICAgbmV4dA0KICAgIGVkaXQgNQ0KICAgICAgICBzZXQgZHN0IDE2OC42My4xMjkuMTYgMjU1LjI1NS4yNTUuMjU1DQogICAgICAgIHNldCBnYXRld2F5IDEwLjEuMTE2LjENCiAgICAgICAgc2V0IGRldmljZSAicG9ydDIiDQogICAgICAgIHNldCBjb21tZW50ICJOZWVkZWQgZm9yIExCIFByb2JlcyINCiAgICBuZXh0DQogICAgZWRpdCA2DQogICAgICAgIHNldCBkc3QgMTY4LjYzLjEyOS4xNiAyNTUuMjU1LjI1NS4yNTUNCiAgICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTIuMQ0KICAgICAgICBzZXQgZGV2aWNlICJwb3J0MSINCiAgICAgICAgc2V0IGNvbW1lbnQgIk5lZWRlZCBmb3IgTEIgUHJvYmVzIg0KICAgIG5leHQNCmVuZA0KY29uZmlnIGZpcmV3YWxsIHZpcA0KICAgIGVkaXQgIlB3UDBKdW1wMDEtQSINCiAgICAgICAgc2V0IGV4dGlwIDEwLjEuMTEyLjQNCiAgICAgICAgc2V0IGV4dGludGYgInBvcnQxIg0KICAgICAgICBzZXQgcG9ydGZvcndhcmQgZW5hYmxlDQogICAgICAgIHNldCBtYXBwZWRpcCAiMTAuMS4xMjAuNCINCiAgICAgICAgc2V0IGV4dHBvcnQgMzM4OTANCiAgICAgICAgc2V0IG1hcHBlZHBvcnQgMzM4OQ0KICAgIG5leHQNCiAgICBlZGl0ICJQd1AwSnVtcDAxLUIiDQogICAgICAgIHNldCBleHRpcCAxMC4xLjExMi41DQogICAgICAgIHNldCBleHRpbnRmICJwb3J0MSINCiAgICAgICAgc2V0IHBvcnRmb3J3YXJkIGVuYWJsZQ0KICAgICAgICBzZXQgbWFwcGVkaXAgIjEwLjEuMTIwLjQiDQogICAgICAgIHNldCBleHRwb3J0IDMzODkwDQogICAgICAgIHNldCBtYXBwZWRwb3J0IDMzODkNCiAgICBuZXh0DQplbmQNCmNvbmZpZyBmaXJld2FsbCBwb2xpY3kNCiAgICBlZGl0IDENCiAgICAgICAgc2V0IG5hbWUgIlB3UDAtQ29yZVRvU3Bva2VzLUludGVybmV0QWNjZXNzIg0KICAgICAgICBzZXQgc3JjaW50ZiAicG9ydDIiDQogICAgICAgIHNldCBkc3RpbnRmICJwb3J0MSINCiAgICAgICAgc2V0IHNyY2FkZHIgImFsbCINCiAgICAgICAgc2V0IGRzdGFkZHIgImFsbCINCiAgICAgICAgc2V0IGFjdGlvbiBhY2NlcHQNCiAgICAgICAgc2V0IHNjaGVkdWxlICJhbHdheXMiDQogICAgICAgIHNldCBzZXJ2aWNlICJBTEwiDQogICAgICAgIHNldCBsb2d0cmFmZmljIGFsbA0KICAgICAgICBzZXQgbG9ndHJhZmZpYy1zdGFydCBlbmFibGUNCiAgICAgICAgc2V0IGZzc28gZGlzYWJsZQ0KICAgICAgICBzZXQgbmF0IGVuYWJsZQ0KICAgIG5leHQNCiAgICBlZGl0IDINCiAgICAgICAgc2V0IG5hbWUgIlB3UDAtTUdNVC1QQVotMi1BUFAtMi1EQiINCiAgICAgICAgc2V0IHNyY2ludGYgInBvcnQyIg0KICAgICAgICBzZXQgZHN0aW50ZiAicG9ydDIiDQogICAgICAgIHNldCBzcmNhZGRyICJhbGwiDQogICAgICAgIHNldCBkc3RhZGRyICJhbGwiDQogICAgICAgIHNldCBhY3Rpb24gYWNjZXB0DQogICAgICAgIHNldCBzY2hlZHVsZSAiYWx3YXlzIg0KICAgICAgICBzZXQgc2VydmljZSAiQUxMIg0KICAgICAgICBzZXQgbG9ndHJhZmZpYyBhbGwNCiAgICAgICAgc2V0IGxvZ3RyYWZmaWMtc3RhcnQgZW5hYmxlDQogICAgICAgIHNldCBmc3NvIGRpc2FibGUNCiAgICBuZXh0DQogICAgZWRpdCAzDQogICAgICAgIHNldCBuYW1lICJQd1AwSnVtcDAxLUEgUkRQIEFjY2VzcyINCiAgICAgICAgc2V0IHNyY2ludGYgInBvcnQxIg0KICAgICAgICBzZXQgZHN0aW50ZiAicG9ydDIiDQogICAgICAgIHNldCBzcmNhZGRyICJhbGwiDQogICAgICAgIHNldCBkc3RhZGRyICJQd1AwSnVtcDAxLUEiICJQd1AwSnVtcDAxLUIiDQogICAgICAgIHNldCBhY3Rpb24gYWNjZXB0DQogICAgICAgIHNldCBzY2hlZHVsZSAiYWx3YXlzIg0KICAgICAgICBzZXQgc2VydmljZSAiUkRQIg0KICAgICAgICBzZXQgbG9ndHJhZmZpYyBhbGwNCiAgICAgICAgc2V0IGZzc28gZGlzYWJsZQ0KICAgIG5leHQNCmVuZA0KY29uZmlnIGxvZyBzZXR0aW5nDQogICAgc2V0IGZ3cG9saWN5LWltcGxpY2l0LWxvZyBlbmFibGUNCmVuZA0KY29uZmlnIHN5c3RlbSBoYQ0KICBzZXQgZ3JvdXAtbmFtZSAiUHdQMEZXQ29yZUhBIg0KICBzZXQgbW9kZSBhLXANCiAgc2V0IGhiZGV2ICJwb3J0MyIgMTAwDQogIHNldCBzZXNzaW9uLXBpY2t1cCBlbmFibGUNCiAgc2V0IHNlc3Npb24tcGlja3VwLWNvbm5lY3Rpb25sZXNzIGVuYWJsZQ0KICBzZXQgaGEtbWdtdC1zdGF0dXMgZW5hYmxlDQogIGNvbmZpZyBoYS1tZ210LWludGVyZmFjZXMNCiAgICBlZGl0IDENCiAgICAgIHNldCBpbnRlcmZhY2UgInBvcnQ0Ig0KICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTYuNjUNCiAgICBuZXh0DQogIGVuZA0KICBzZXQgb3ZlcnJpZGUgZGlzYWJsZQ0KICBzZXQgcHJpb3JpdHkgMjU1DQogIHNldCB1bmljYXN0LWhiIGVuYWJsZQ0KICBzZXQgdW5pY2FzdC1oYi1wZWVyaXAgMTAuMS4xMTYuMzcNCmVuZA0KDQotLT09PT09PT09PT09PT09PTA3NDA5NDc5OTQwNDg5MTk2ODk9PQ0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PSJ1cy1hc2NpaSINCk1JTUUtVmVyc2lvbjogMS4wDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0DQpDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0ibGljZW5zZSINCg0KLS0tLS1CRUdJTiBGR1QgVk0gTElDRU5TRS0tLS0tDQpRQUFBQUF4TzM2SWt4a29xYlZiWUVLdno5cXBGRCtXd0tKNWlsYmt1aVV2SzhpWmFDQlRaMmdpY1l1VlYxb2V6DQpPL1FNNGhuTUZRZVBsdmxnYS9neUk5aUlSZG5RR1FBQVhoTmxZWlFuTUpMWHlmUzdVcDZGQWhRZWI4Yk9MV3UyDQpUalE0eTc2a2ZML0QzME92bHBDWmpiUWdJV3dESnU0TlBzWllBb2IyUERWZytKRWhrOWRBTzltcVR1K2dGOTU0DQpPQWxGVzdsalV6cGp5UlUvc2ZhUHdJU3BzK08vbE1pKzcrdlZrYlNCcHV0dGRTZ3RJa1NLcUVlQ2tkRXVvS0NkDQp2Nk1iNTE4aW5oZW8rcGZZZUloM0txRDJnWXpsZzgvZFo4bm52Y2pNZzA5d2dUTnVzbG1mdU5jeFUwTjFncFcxDQp6OTVHWFZuTzRzcDB5RWYwNzFscGNJalhHU1NLRVl4SzBwK0lIR1RmVld2RS9sb3dPUWdJRGpvM1prM3lXbjBFDQpDdTdpTlprdjZFL2Fpc2xEamVZZ3ZiS0NTY29RWmN4cVg1YzBhOUdub1BqYk1PUURsbkdVdTZCcUswWUN2eGdEDQo1MXk3b20waW9pMXcwVTJNMzd4Q0RhZVlTUURFZmRNSWh0SXNlblkxU29mSXBmb1VkcXY2bmdHMmpHdGk1OHBBDQp1SCtzZGIzTnVjMD0NCi0tLS0tRU5EIEZHVCBWTSBMSUNFTlNFLS0tLS0NCg0KLS09PT09PT09PT09PT09PT0wNzQwOTQ3OTk0MDQ4OTE5Njg5PT0tLQ==",
                "firewall2Config": "Q29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSI9PT09PT09PT09PT09PT0wNzQwOTQ3OTk0MDQ4OTE5Njg5PT0iDQpNSU1FLVZlcnNpb246IDEuMA0KDQotLT09PT09PT09PT09PT09PTA3NDA5NDc5OTQwNDg5MTk2ODk9PQ0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PSJ1cy1hc2NpaSINCk1JTUUtVmVyc2lvbjogMS4wDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0DQpDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0iY29uZmlnIg0KDQpjb25maWcgc3lzdGVtIGdsb2JhbA0KICAgIHNldCBhZG1pbi1zcG9ydCA4NDQzDQogICAgc2V0IGFsaWFzICJQd1AwRldDb3JlQiINCiAgICBzZXQgaG9zdG5hbWUgIlB3UDBGV0NvcmVCIg0KICAgIHNldCB0aW1lem9uZSAwNA0KZW5kDQpjb25maWcgc3lzdGVtIGludGVyZmFjZQ0KICAgIGVkaXQgInBvcnQxIg0KICAgICAgICBzZXQgdmRvbSAicm9vdCINCiAgICAgICAgc2V0IG1vZGUgc3RhdGljDQogICAgICAgIHNldCBpcCAxMC4xLjExMi41LzIzDQogICAgICAgIHNldCBhbGxvd2FjY2VzcyBwaW5nIHByb2JlLXJlc3BvbnNlDQogICAgICAgIHNldCB0eXBlIHBoeXNpY2FsDQogICAgICAgIHNldCBkZXNjcmlwdGlvbiAiUHdQMC1PdXRzaWRlIg0KICAgICAgICBzZXQgYWxpYXMgIlB3UDAtT3V0c2lkZSINCiAgICBuZXh0DQogICAgZWRpdCAicG9ydDIiDQogICAgICAgIHNldCB2ZG9tICJyb290Ig0KICAgICAgICBzZXQgbW9kZSBzdGF0aWMNCiAgICAgICAgc2V0IGlwIDEwLjEuMTE2LjYvMjcNCiAgICAgICAgc2V0IGFsbG93YWNjZXNzIHBpbmcgcHJvYmUtcmVzcG9uc2UNCiAgICAgICAgc2V0IHR5cGUgcGh5c2ljYWwNCiAgICAgICAgc2V0IGRlc2NyaXB0aW9uICJQd1AwLUNvcmVUb1Nwb2tlcyINCiAgICAgICAgc2V0IGFsaWFzICJQd1AwLUNvcmVUb1Nwb2tlcyINCiAgICBuZXh0DQogICAgZWRpdCAicG9ydDMiDQogICAgICAgIHNldCB2ZG9tICJyb290Ig0KICAgICAgICBzZXQgbW9kZSBzdGF0aWMNCiAgICAgICAgc2V0IGlwIDEwLjEuMTE2LjM3LzI3DQogICAgICAgIHNldCB0eXBlIHBoeXNpY2FsDQogICAgICAgIHNldCBkZXNjcmlwdGlvbiAiUHdQMC1IQVN5bmMiDQogICAgICAgIHNldCBhbGlhcyAiUHdQMC1IQVN5bmMiDQogICAgbmV4dA0KICAgIGVkaXQgInBvcnQ0Ig0KICAgICAgICBzZXQgdmRvbSAicm9vdCINCiAgICAgICAgc2V0IG1vZGUgc3RhdGljDQogICAgICAgIHNldCBpcCAxMC4xLjExNi42OS8yNw0KICAgICAgICBzZXQgYWxsb3dhY2Nlc3MgcGluZyBodHRwcyBzc2ggaHR0cCBmZ2ZtDQogICAgICAgIHNldCB0eXBlIHBoeXNpY2FsDQogICAgICAgIHNldCBkZXNjcmlwdGlvbiAiUHdQMC1NYW5hZ2VtZW50Ig0KICAgICAgICBzZXQgYWxpYXMgIlB3UDAtTWFuYWdlbWVudCINCiAgICBuZXh0DQplbmQNCmNvbmZpZyBzeXN0ZW0gcHJvYmUtcmVzcG9uc2UNCiAgICBzZXQgbW9kZSBodHRwLXByb2JlDQplbmQNCmNvbmZpZyByb3V0ZXIgc3RhdGljDQogICAgZWRpdCAxDQogICAgICAgIHNldCBkc3QgMTAuMjUuMC4wIDI1NS4yNTUuMTkyLjANCiAgICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTYuMQ0KICAgICAgICBzZXQgZGV2aWNlICJwb3J0MiINCiAgICBuZXh0DQogICAgZWRpdCAyDQogICAgICAgIHNldCBkc3QgMTAuMjUuMTI4LjAgMjU1LjI1NS4xMjguMA0KICAgICAgICBzZXQgZ2F0ZXdheSAxMC4xLjExNi4xDQogICAgICAgIHNldCBkZXZpY2UgInBvcnQyIg0KICAgIG5leHQNCiAgICBlZGl0IDMNCiAgICAgICAgc2V0IGRzdCAxMC4xLjEyMC4wIDI1NS4yNTUuMjQ4LjANCiAgICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTYuMQ0KICAgICAgICBzZXQgZGV2aWNlICJwb3J0MiINCiAgICBuZXh0DQogICAgZWRpdCA0DQogICAgICAgIHNldCBnYXRld2F5IDEwLjEuMTEyLjENCiAgICAgICAgc2V0IGRldmljZSAicG9ydDEiDQogICAgbmV4dA0KICAgIGVkaXQgNQ0KICAgICAgICBzZXQgZHN0IDE2OC42My4xMjkuMTYgMjU1LjI1NS4yNTUuMjU1DQogICAgICAgIHNldCBnYXRld2F5IDEwLjEuMTE2LjENCiAgICAgICAgc2V0IGRldmljZSAicG9ydDIiDQogICAgICAgIHNldCBjb21tZW50ICJOZWVkZWQgZm9yIExCIFByb2JlcyINCiAgICBuZXh0DQogICAgZWRpdCA2DQogICAgICAgIHNldCBkc3QgMTY4LjYzLjEyOS4xNiAyNTUuMjU1LjI1NS4yNTUNCiAgICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTIuMQ0KICAgICAgICBzZXQgZGV2aWNlICJwb3J0MSINCiAgICAgICAgc2V0IGNvbW1lbnQgIk5lZWRlZCBmb3IgTEIgUHJvYmVzIg0KICAgIG5leHQNCmVuZA0KY29uZmlnIGZpcmV3YWxsIHZpcA0KICAgIGVkaXQgIlB3UDBKdW1wMDEtQSINCiAgICAgICAgc2V0IGV4dGlwIDEwLjEuMTEyLjQNCiAgICAgICAgc2V0IGV4dGludGYgInBvcnQxIg0KICAgICAgICBzZXQgcG9ydGZvcndhcmQgZW5hYmxlDQogICAgICAgIHNldCBtYXBwZWRpcCAiMTAuMS4xMjAuNCINCiAgICAgICAgc2V0IGV4dHBvcnQgMzM4OTANCiAgICAgICAgc2V0IG1hcHBlZHBvcnQgMzM4OQ0KICAgIG5leHQNCiAgICBlZGl0ICJQd1AwSnVtcDAxLUIiDQogICAgICAgIHNldCBleHRpcCAxMC4xLjExMi41DQogICAgICAgIHNldCBleHRpbnRmICJwb3J0MSINCiAgICAgICAgc2V0IHBvcnRmb3J3YXJkIGVuYWJsZQ0KICAgICAgICBzZXQgbWFwcGVkaXAgIjEwLjEuMTIwLjQiDQogICAgICAgIHNldCBleHRwb3J0IDMzODkwDQogICAgICAgIHNldCBtYXBwZWRwb3J0IDMzODkNCiAgICBuZXh0DQplbmQNCmNvbmZpZyBmaXJld2FsbCBwb2xpY3kNCiAgICBlZGl0IDENCiAgICAgICAgc2V0IG5hbWUgIlB3UDAtQ29yZVRvU3Bva2VzLUludGVybmV0QWNjZXNzIg0KICAgICAgICBzZXQgc3JjaW50ZiAicG9ydDIiDQogICAgICAgIHNldCBkc3RpbnRmICJwb3J0MSINCiAgICAgICAgc2V0IHNyY2FkZHIgImFsbCINCiAgICAgICAgc2V0IGRzdGFkZHIgImFsbCINCiAgICAgICAgc2V0IGFjdGlvbiBhY2NlcHQNCiAgICAgICAgc2V0IHNjaGVkdWxlICJhbHdheXMiDQogICAgICAgIHNldCBzZXJ2aWNlICJBTEwiDQogICAgICAgIHNldCBsb2d0cmFmZmljIGFsbA0KICAgICAgICBzZXQgbG9ndHJhZmZpYy1zdGFydCBlbmFibGUNCiAgICAgICAgc2V0IGZzc28gZGlzYWJsZQ0KICAgICAgICBzZXQgbmF0IGVuYWJsZQ0KICAgIG5leHQNCiAgICBlZGl0IDINCiAgICAgICAgc2V0IG5hbWUgIlB3UDAtTUdNVC1QQVotMi1BUFAtMi1EQiINCiAgICAgICAgc2V0IHNyY2ludGYgInBvcnQyIg0KICAgICAgICBzZXQgZHN0aW50ZiAicG9ydDIiDQogICAgICAgIHNldCBzcmNhZGRyICJhbGwiDQogICAgICAgIHNldCBkc3RhZGRyICJhbGwiDQogICAgICAgIHNldCBhY3Rpb24gYWNjZXB0DQogICAgICAgIHNldCBzY2hlZHVsZSAiYWx3YXlzIg0KICAgICAgICBzZXQgc2VydmljZSAiQUxMIg0KICAgICAgICBzZXQgbG9ndHJhZmZpYyBhbGwNCiAgICAgICAgc2V0IGxvZ3RyYWZmaWMtc3RhcnQgZW5hYmxlDQogICAgICAgIHNldCBmc3NvIGRpc2FibGUNCiAgICBuZXh0DQogICAgZWRpdCAzDQogICAgICAgIHNldCBuYW1lICJQd1AwSnVtcDAxLUEgUkRQIEFjY2VzcyINCiAgICAgICAgc2V0IHNyY2ludGYgInBvcnQxIg0KICAgICAgICBzZXQgZHN0aW50ZiAicG9ydDIiDQogICAgICAgIHNldCBzcmNhZGRyICJhbGwiDQogICAgICAgIHNldCBkc3RhZGRyICJQd1AwSnVtcDAxLUEiICJQd1AwSnVtcDAxLUIiDQogICAgICAgIHNldCBhY3Rpb24gYWNjZXB0DQogICAgICAgIHNldCBzY2hlZHVsZSAiYWx3YXlzIg0KICAgICAgICBzZXQgc2VydmljZSAiUkRQIg0KICAgICAgICBzZXQgbG9ndHJhZmZpYyBhbGwNCiAgICAgICAgc2V0IGZzc28gZGlzYWJsZQ0KICAgIG5leHQNCmVuZA0KY29uZmlnIGxvZyBzZXR0aW5nDQogICAgc2V0IGZ3cG9saWN5LWltcGxpY2l0LWxvZyBlbmFibGUNCmVuZA0KY29uZmlnIHN5c3RlbSBoYQ0KICBzZXQgZ3JvdXAtbmFtZSAiUHdQMEZXQ29yZUhBIg0KICBzZXQgbW9kZSBhLXANCiAgc2V0IGhiZGV2ICJwb3J0MyIgMTAwDQogIHNldCBzZXNzaW9uLXBpY2t1cCBlbmFibGUNCiAgc2V0IHNlc3Npb24tcGlja3VwLWNvbm5lY3Rpb25sZXNzIGVuYWJsZQ0KICBzZXQgaGEtbWdtdC1zdGF0dXMgZW5hYmxlDQogIGNvbmZpZyBoYS1tZ210LWludGVyZmFjZXMNCiAgICBlZGl0IDENCiAgICAgIHNldCBpbnRlcmZhY2UgInBvcnQ0Ig0KICAgICAgc2V0IGdhdGV3YXkgMTAuMS4xMTYuNjUNCiAgICBuZXh0DQogIGVuZA0KICBzZXQgb3ZlcnJpZGUgZGlzYWJsZQ0KICBzZXQgcHJpb3JpdHkgMjU1DQogIHNldCB1bmljYXN0LWhiIGVuYWJsZQ0KICBzZXQgdW5pY2FzdC1oYi1wZWVyaXAgMTAuMS4xMTYuMzYNCmVuZA0KDQotLT09PT09PT09PT09PT09PTA3NDA5NDc5OTQwNDg5MTk2ODk9PQ0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PSJ1cy1hc2NpaSINCk1JTUUtVmVyc2lvbjogMS4wDQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0DQpDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT0ibGljZW5zZSINCg0KLS0tLS1CRUdJTiBGR1QgVk0gTElDRU5TRS0tLS0tDQpRQUFBQUF4TzM2SWt4a29xYlZiWUVLdno5cXBGRCtXd0tKNWlsYmt1aVV2SzhpWmFDQlRaMmdpY1l1VlYxb2V6DQpPL1FNNGhuTUZRZVBsdmxnYS9neUk5aUlSZG5RR1FBQVhoTmxZWlFuTUpMWHlmUzdVcDZGQWhRZWI4Yk9MV3UyDQpUalE0eTc2a2ZML0QzME92bHBDWmpiUWdJV3dESnU0TlBzWllBb2IyUERWZytKRWhrOWRBTzltcVR1K2dGOTU0DQpPQWxGVzdsalV6cGp5UlUvc2ZhUHdJU3BzK08vbE1pKzcrdlZrYlNCcHV0dGRTZ3RJa1NLcUVlQ2tkRXVvS0NkDQp2Nk1iNTE4aW5oZW8rcGZZZUloM0txRDJnWXpsZzgvZFo4bm52Y2pNZzA5d2dUTnVzbG1mdU5jeFUwTjFncFcxDQp6OTVHWFZuTzRzcDB5RWYwNzFscGNJalhHU1NLRVl4SzBwK0lIR1RmVld2RS9sb3dPUWdJRGpvM1prM3lXbjBFDQpDdTdpTlprdjZFL2Fpc2xEamVZZ3ZiS0NTY29RWmN4cVg1YzBhOUdub1BqYk1PUURsbkdVdTZCcUswWUN2eGdEDQo1MXk3b20waW9pMXcwVTJNMzd4Q0RhZVlTUURFZmRNSWh0SXNlblkxU29mSXBmb1VkcXY2bmdHMmpHdGk1OHBBDQp1SCtzZGIzTnVjMD0NCi0tLS0tRU5EIEZHVCBWTSBMSUNFTlNFLS0tLS0NCg0KLS09PT09PT09PT09PT09PT0wNzQwOTQ3OTk0MDQ4OTE5Njg5PT0tLQ==",
                "tagValues": {
                    "Owner": "build.pipeline@tpsgc-pwgsc.gc.ca",
                    "CostCenter": "PSPC-EA",
                    "Enviroment": "Validate",
                    "Classification": "Unclassified",
                    "Organizations": "PSPC-CCC-E&O"
                }
            }
        }
    }
}